/* TOTEM-v3.2 June 18 2008*/

/*
 * ===========================================================
 * TOTEM : A TOolbox for Traffic Engineering Methods
 * ===========================================================
 *
 * (C) Copyright 2004-2006, by Research Unit in Networking RUN, University of Liege. All Rights Reserved.
 *
 * Project Info:  http://totem.run.montefiore.ulg.ac.be
 *
 * This library is free software; you can redistribute it and/or modify it under the terms
 * of the GNU General Public License version 2.0 as published by the Free Software Foundation;
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this
 * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307, USA.
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc.
 * in the United States and other countries.]
*/
package be.ac.ulg.montefiore.run.totem.chart.model;

import be.ac.ulg.montefiore.run.totem.chart.model.exception.ChartParameterException;
import be.ac.ulg.montefiore.run.totem.chart.model.exception.InvalidChartDataException;
import be.ac.ulg.montefiore.run.totem.chart.model.plotters.ChartPlotter;
import be.ac.ulg.montefiore.run.totem.chart.model.plotters.PlotterManager;
import be.ac.ulg.montefiore.run.totem.chart.model.collectors.ChartDataCollector;
import be.ac.ulg.montefiore.run.totem.chart.model.collectors.DataCollectorManager;
import org.apache.log4j.Logger;
import org.jfree.chart.JFreeChart;

import java.util.HashMap;

/*
* Changes:
* --------
* 25-Jan-2006: now uses the new DataCollectorManager and PlotterManager. add the getCollector method.
*
*/

/**
* Class used to collect data and create charts using the data
* It used a ChartDataCollector to collect the data and a ChartPlotter to generate the chart.
*
* The instances of both these interfaces should be registered in the global preferences of the toolbox under
* AVAILABLE-DATA-COLLECTORS and AVAILABLE-CHART-PLOTTERS respectively.
* The collected data are maintained in a ChartData structure.
*
* @see ChartData
* @see be.ac.ulg.montefiore.run.totem.chart.model.collectors.ChartDataCollector
* @see be.ac.ulg.montefiore.run.totem.chart.model.plotters.ChartPlotter
*
* <p>Creation date: 16 d�c. 2005
*
* @author Ga�l Monfort (monfort@run.montefiore.ulg.ac.be)
*/

public class Chart {
    private static final Logger logger = Logger.getLogger(Chart.class);

    private ChartDataCollector chartCollector = null;
    private JFreeChart chart = null;
    private ChartData data = null;

    /**
     * Build a Chart object that is able to collect data with the specified collector. Parameters are passed to the collector.
     * @param dataCollectorName
     * @param params
     */
    public Chart(String dataCollectorName, HashMap<String, String> params) throws ChartParameterException {
        data = new ChartData();

        if (dataCollectorName == null) return;

        chartCollector = DataCollectorManager.getInstance().getCollectorInstance(dataCollectorName);
        if (chartCollector == null)
            throw new ChartParameterException("Collector not found.");
        try {
            chartCollector.setParameters(params);
        } catch (ChartParameterException e) {
            //e.printStackTrace();
            logger.error("Parameter Exception: " + e.getMessage());
            throw e;
        }
    }

    /**
     * Add a series of data to the collected data. The parameters are passed to the ChartDataCollector.
     * @param name of the serie to add
     * @param params
     * @throws ChartParameterException if the name already exists in the data
     */
    public void addSeries(String name, HashMap<String, String> params) throws ChartParameterException {
        double[] values = chartCollector.collectData(params);

        try {
            data.addRow(name, values);
        } catch (InvalidChartDataException e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            throw new ChartParameterException(e.getMessage());
        }

    }

    /**
     * Create the JFreeChart object.
     * The chart is generated by the <code>plot()</code> method of the ChartPlotter whose name is given as argument
     * A reference to the last generated chart can be obtained by <code>getPlot()</code>
     * @param chartPlotterName the simple name of the class corresponding to a registered extend of the interface ChartPlotter.
     * @param title Title of the chart
     * @param xAxisTitle X Axis Label
     * @param yAxisTitle Y Axis Label
     * @param params Parameters to pass to the plot method of the chosen chartPlotter
     */
    public void plot(String chartPlotterName, String title, String xAxisTitle, String yAxisTitle, HashMap<String, String> params) throws ChartParameterException {
        ChartPlotter plotter = PlotterManager.getInstance().getPlotterInstance(chartPlotterName);
        if (plotter == null)
            throw new ChartParameterException("Plotter not found.");
        chart = plotter.plot(data, title, xAxisTitle, yAxisTitle, params);
    }

    /**
     * @return the last chart generated.
     */
    public JFreeChart getPlot() {
        return chart;
    }

    /**
     * Set the data used to compute the
     * @param data
     */
    public void setData(ChartData data) {
        this.data = data;
    }

    /**
     * @return the data used to compute the charts
     */
    public ChartData getData() {
        return data;
    }

    public ChartDataCollector getCollector() {
        return chartCollector;
    }
}
