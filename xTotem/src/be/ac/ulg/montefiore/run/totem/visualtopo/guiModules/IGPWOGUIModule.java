/* TOTEM-v3.2 June 18 2008*/

/*
 * ===========================================================
 * TOTEM : A TOolbox for Traffic Engineering Methods
 * ===========================================================
 *
 * (C) Copyright 2004-2006, by Research Unit in Networking RUN, University of Liege. All Rights Reserved.
 *
 * Project Info:  http://totem.run.montefiore.ulg.ac.be
 *
 * This library is free software; you can redistribute it and/or modify it under the terms
 * of the GNU General Public License version 2.0 as published by the Free Software Foundation;
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this
 * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307, USA.
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc.
 * in the United States and other countries.]
*/
package be.ac.ulg.montefiore.run.totem.visualtopo.guiModules;

import be.ac.ucl.poms.repository.IGPWO.IGPWO;
import be.ac.ulg.montefiore.run.totem.domain.model.Domain;
import be.ac.ulg.montefiore.run.totem.repository.bgpAwareIGPWO.bgpAwareIGPWO;
import be.ac.ulg.montefiore.run.totem.repository.facade.RepositoryManager;
import be.ac.ulg.montefiore.run.totem.repository.model.TotemAction;
import be.ac.ulg.montefiore.run.totem.repository.model.TotemActionList;
import be.ac.ulg.montefiore.run.totem.repository.model.exception.AlgorithmInitialisationException;
import be.ac.ulg.montefiore.run.totem.repository.model.exception.NoSuchAlgorithmException;
import be.ac.ulg.montefiore.run.totem.trafficMatrix.exception.InvalidTrafficMatrixException;
import be.ac.ulg.montefiore.run.totem.trafficMatrix.facade.TrafficMatrixManager;
import be.ac.ulg.montefiore.run.totem.visualtopo.facade.GUIManager;
import be.ac.ulg.montefiore.run.totem.visualtopo.graph.LinkLabeller;
import be.ac.ulg.montefiore.run.totem.visualtopo.guiComponents.MainWindow;
import be.ac.ulg.montefiore.run.totem.visualtopo.guiComponents.ProgressBarPanel;
import be.ac.ulg.montefiore.run.totem.visualtopo.guiComponents.ReportPanel;
import be.ac.ulg.montefiore.run.totem.visualtopo.util.SpringUtilities;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.File;
import java.util.HashMap;

/*
* Changes:
* --------
* 12-Jan-2006: Remove useless repaint() call. (GMO)
* 13-Feb-2006: Change layout. (GMO)
* 24-Oct-2006: not singleton anymore, add a public constructor to accomodate new module loader (GMO)
* 14-Jun-2007: add BGPAware IGPWO, refactor code (GMO)
* 20-Aug-2007: show information message after optimization is done (GMO)
*/

/**
 * Module to perform IGPWO calculations
 * Singleton class. An instance can be obntained by the static method getInstance()
 * <p/>
 * <p>Creation date: 9 nov. 2005
 *
 * @author GaÃ«l Monfort (monfort@run.montefiore.ulg.ac.be)
 */

public class IGPWOGUIModule extends AbstractGUIModule {

    private static TrafficMatrixManager matrixManager = null;
    private static MainWindow mainWindow = null;
    private static GUIManager manager = null;
    private static final String reportFileName = "IGP-WO-output.txt";

    /**
     * a private constructor
     */
    public IGPWOGUIModule() {
        mainWindow = MainWindow.getInstance();
        manager = GUIManager.getInstance();
        matrixManager = TrafficMatrixManager.getInstance();
    }

    public JMenu getMenu() {
        JMenu menu = new JMenu("IGP-WO");
        menu.setMnemonic(KeyEvent.VK_I);
        JMenuItem menuItem = new JMenuItem("Optimize Link Weight ...");
        menuItem.addActionListener(new OptimizeWeightListener(false));
        menu.add(menuItem);

        menuItem = new JMenuItem("BGP Aware IGPWO ...");
        menuItem.addActionListener(new OptimizeWeightListener(true));
        menu.add(menuItem);

        menuItem = new JMenuItem("View last report");
        menuItem.addActionListener(new ViewReportListener());
        menu.add(menuItem);

        return menu;
    }

    public String getName() {
        return "IGP-WO";
    }

    /**
     * Display the report generated by the IGPWO algorithm
     */
    public void displayReport() {
        JDialog dialog = new JDialog(mainWindow, "Report");
        dialog.setContentPane(new ReportPanel("IGPWO Report", reportFileName));
        dialog.setSize(700, 500);
        dialog.setVisible(true);
        dialog.validate();
    }

    /**
     * Compute Link weight with IGPWO and display a report
     *
     * @param nbIter
     * @param nbWeight
     * @param minSR
     * @param maxSR
     * @param initSR
     * @param random
     * @param seed
     */
    public void startAlgoWo(final int nbIter, final int nbWeight, final double minSR, final double maxSR, final double initSR, final boolean random, final int seed, final int[] TMIds, final boolean interDomainLinks, final boolean bgpAware) {
        IGPWO igpwo = null;
        bgpAwareIGPWO bgpIgpwo = null;
        final Domain domain = manager.getCurrentDomain();
        try {
            if (bgpAware)
                bgpIgpwo = (bgpAwareIGPWO) RepositoryManager.getInstance().getAlgo("bgpAwareIGPWO", domain.getASID());
            else
                igpwo = (IGPWO) RepositoryManager.getInstance().getAlgo("IGPWO", domain.getASID());
        } catch (NoSuchAlgorithmException e) {
            HashMap<String, String> algoParam = new HashMap<String, String>();
            algoParam.put("ASID", new Integer(domain.getASID()).toString());
            try {
                if (bgpAware)
                    RepositoryManager.getInstance().startAlgo("bgpAwareIGPWO", algoParam, domain.getASID());
                else
                    RepositoryManager.getInstance().startAlgo("IGPWO", algoParam, domain.getASID());
            } catch (AlgorithmInitialisationException e1) {
                e1.printStackTrace();
                mainWindow.errorMessage("Error in IGPWO Calculations : " + e.getMessage());
                return;
            }
            try {
                if (bgpAware)
                    bgpIgpwo = (bgpAwareIGPWO) RepositoryManager.getInstance().getAlgo("bgpAwareIGPWO", domain.getASID());
                else
                    igpwo = (IGPWO) RepositoryManager.getInstance().getAlgo("IGPWO", domain.getASID());
            } catch (NoSuchAlgorithmException e1) {
                e1.printStackTrace();
                mainWindow.errorMessage("Error in IGPWO Calculations : " + e.getMessage());
                return;
            }
        }

        File report = new File(reportFileName);
        report.delete();

        ProgressBarPanel progressBar = new ProgressBarPanel(0, 100);
        progressBar.setCancelable(false);
        progressBar.getProgressBar().setIndeterminate(true);
        progressBar.getProgressBar().setSize(400, 60);
        progressBar.setMessage("<html><center>Please wait while performing calculations...<br>" +
                "This may take some time, depending on the topology size and the chosen parameters.</center>");


        final JDialog pbDialog = mainWindow.showDialog(progressBar, "Progress Bar");
        pbDialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
        final TotemActionList acList;
        try {
            if (bgpAware)
                acList = bgpIgpwo.calculateWeightsParameters(domain.getASID(), TMIds, nbIter, nbWeight, random, seed, minSR, maxSR, initSR, interDomainLinks);
            else
                acList = igpwo.calculateWeightsParameters(domain.getASID(), TMIds, nbIter, nbWeight, random, seed, minSR, maxSR, initSR);

            for (int i = 0; i < acList.size(); i++) {
                ((TotemAction) acList.get(i)).execute();
            }
        } catch (Exception e) {
            e.printStackTrace();
            mainWindow.errorMessage("Error in IGPWO Calculations : " + e.getMessage());
        }
        pbDialog.dispose();

    }


    public boolean loadAtStartup() {
        return true;
    }


    public class OptimizeWeightListener implements ActionListener {
        private boolean bgpAware;

        public OptimizeWeightListener(boolean bgpAware) {
            this.bgpAware = bgpAware;
        }

        public void actionPerformed(ActionEvent e) {
            if (manager.getCurrentDomain() == null)
                mainWindow.errorMessage("A domain must be loaded to perform this action.");
            else {
                if (GUIManager.getInstance().getManagedMatrices().size() <= 0) {
                    mainWindow.errorMessage("A Traffic Matrix must be loaded to perform this action.");
                    return;
                }
                mainWindow.showDialog(new IGPWODialog(bgpAware));
            }
        }
    }

    public class ViewReportListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            displayReport();
        }
    }

    private class IGPWODialog extends JDialog {
        private boolean bgpAware = false;

        private JTextField nbIter = null;
        private JTextField nbWeight = null;
        private JCheckBox random = null;
        private JTextField maxSR = null;
        private JTextField minSR = null;
        private JTextField initSR = null;
        private JTextField seed = null;
        private JList matrices = null;

        private JCheckBox interdomain = null;

        public IGPWODialog(boolean bgpAware) {
            super(MainWindow.getInstance(), "IGP-WO Parameters");
            this.bgpAware = bgpAware;
            setupUI();
        }

        private void setupUI() {
            JPanel generalPanel = new JPanel(new BorderLayout());
            JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 8, 8));
            JPanel jp = new JPanel(new SpringLayout());

            generalPanel.add(jp, BorderLayout.CENTER);
            generalPanel.add(buttonPanel, BorderLayout.SOUTH);

            JLabel l;

            l = new JLabel("Number of iterations:", JLabel.TRAILING);
            jp.add(l);

            nbIter = new JTextField("100");
            l.setLabelFor(nbIter);
            jp.add(nbIter);

            l = new JLabel("Maximum Possible Weight:", JLabel.TRAILING);
            jp.add(l);

            nbWeight = new JTextField("50");
            l.setLabelFor(nbWeight);
            jp.add(nbWeight);

            l = new JLabel("Initial solution selection:", JLabel.TRAILING);
            jp.add(l);

            random = new JCheckBox("Random");
            random.setSelected(true);
            l.setLabelFor(random);
            jp.add(random);

            l = new JLabel("Seed for random number generator:", JLabel.TRAILING);
            jp.add(l);

            seed = new JTextField("1");
            l.setLabelFor(seed);
            jp.add(seed);

            l = new JLabel("Minimum sampling rate:", JLabel.TRAILING);
            jp.add(l);

            minSR = new JTextField("0.01");
            l.setLabelFor(minSR);
            jp.add(minSR);

            l = new JLabel("Maximum sampling rate:", JLabel.TRAILING);
            jp.add(l);

            maxSR = new JTextField("0.4");
            l.setLabelFor(maxSR);
            jp.add(maxSR);

            l = new JLabel("Initial sampling rate:", JLabel.TRAILING);
            jp.add(l);

            initSR = new JTextField("0.2");
            l.setLabelFor(initSR);
            jp.add(initSR);

            int rows = 8;
            if (bgpAware) {
                rows++;
                interdomain = new JCheckBox("yes");
                interdomain.setSelected(true);
                l = new JLabel("Optimize inter domain links:", JLabel.TRAILING);
                jp.add(l);
                l.setLabelFor(interdomain);
                jp.add(interdomain);
            }

            l = new JLabel("Traffic Matrices:", JLabel.TRAILING);
            jp.add(l);

            matrices = new JList(GUIManager.getInstance().getManagedMatrices().toArray());
            try {
                int defID = matrixManager.getDefaultTrafficMatrixID();
                matrices.setSelectedValue(new Integer(defID), true);
            } catch (InvalidTrafficMatrixException e) {
                //e.printStackTrace();
            }

            l.setLabelFor(matrices);
            //JScrollPane scroll = new JScrollPane(matrices);
            //jp.add(scroll);
            jp.add(matrices);

            JButton accept = new JButton("Accept Parameters");
            accept.addActionListener(new StartActionListener());
            buttonPanel.add(accept);

            SpringUtilities.makeCompactGrid(jp, rows, 2, 5, 5, 5, 5);

            setContentPane(generalPanel);
            getRootPane().setDefaultButton(accept);
        }

        private class StartActionListener implements ActionListener {

            public void actionPerformed(ActionEvent e) {
                final int iter;
                final int weight;
                final double fMinSR;
                final double fMaxSR;
                final double fInitSR;
                final int iSeed;
                final int[] TMids;
                final boolean brandom;
                final boolean interdomainLinks;
                brandom = random.isSelected();

                /* perform fields validation */

                try {
                    iter = Integer.parseInt(nbIter.getText());
                } catch (NumberFormatException ex) {
                    mainWindow.errorMessage("Number of iterations must be an integer.");
                    return;
                }

                try {
                    weight = Integer.parseInt(nbWeight.getText());
                } catch (NumberFormatException ex) {
                    mainWindow.errorMessage("Maximum possible weight must be an integer.");
                    return;
                }
                //TODO: FIX this when the IGPWO library bug is corrected
                if (weight > 250) {
                    mainWindow.errorMessage("Maximum possible weight is limited to 250.");
                    return;
                }

                try {
                    fMinSR = Double.parseDouble(minSR.getText());
                } catch (NumberFormatException ex) {
                    mainWindow.errorMessage("Minimum sampling rate must be a number.");
                    return;
                }

                try {
                    fMaxSR = Double.parseDouble(maxSR.getText());
                } catch (NumberFormatException ex) {
                    mainWindow.errorMessage("Maximum sampling rate must be a number.");
                    return;
                }

                try {
                    fInitSR = Double.parseDouble(initSR.getText());
                } catch (NumberFormatException ex) {
                    mainWindow.errorMessage("Initial sampling rate must be a number.");
                    return;
                }

                try {
                    iSeed = Integer.parseInt(seed.getText());
                } catch (NumberFormatException ex) {
                    mainWindow.errorMessage("Initial sampling rate must be a number.");
                    return;
                }

                int nbMatrices = matrices.getSelectedValues().length;
                if (nbMatrices <= 0) {
                    mainWindow.errorMessage("Please select at least one traffic matrix.");
                    return;
                }
                TMids = new int[nbMatrices];
                int i = 0;
                for (Object k : matrices.getSelectedValues()) {
                    TMids[i++] = ((Integer) k).intValue();
                }

                if (bgpAware) interdomainLinks = interdomain.isSelected();
                else interdomainLinks = false;

                dispose();
                    
                new Thread(new Runnable() {
                    public void run() {
                        startAlgoWo(iter, weight, fMinSR, fMaxSR, fInitSR, brandom, iSeed, TMids, bgpAware, interdomainLinks);
                        mainWindow.setLinkLabel(LinkLabeller.LINK_TE_METRIC);
                        displayReport();
                        JOptionPane.showMessageDialog(mainWindow, "<html><center>The new optimized link weights are stored in the " +
                                "TE-metric field of each link.<br>To see the resulting link loads, please route the traffic" +
                                " matrix with shortest paths corresponding to these metrics.</center>", "Information", JOptionPane.INFORMATION_MESSAGE);
                    }
                }).start();

            }
        }

    }
}
